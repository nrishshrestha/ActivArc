import tkinter as tk
from tkinter import messagebox, ttk
from PIL import Image, ImageTk
from typing import List, Tuple, Dict
from pathlib import Path
import datetime

class WorkoutCalculator:
    # Define the calories burned per rep for each workout type
    CALORIES_PER_REP: Dict[str, float] = { 
        "Push-ups": 0.5,
        "Sit-ups": 0.3,
        "Squats": 0.6,
        "Pull-ups": 1.0,
        "Lunges": 0.4,
        "Burpees": 1.2,
    }

    def __init__(self):
        # Initialize the main tkinter window (app) and set the title and size
        self.root = tk.Tk()
        self.root.title("Workout Calorie Calculator")
        self.root.geometry("700x600")

        # List to hold the workout details (workout type, sets, reps, and image label)
        self.workout_entries: List[Tuple[tk.StringVar, tk.Entry, tk.Entry, tk.Label]] = []
        # Dictionary to store images related to each workout
        self.workout_images: Dict[str, ImageTk.PhotoImage] = {}

        # Call setup functions to style widgets, load workout images, and create UI elements
        self._setup_styles()
        self._load_workout_images()
        self._create_widgets()

    def _setup_styles(self):
        # Configure styles for various UI elements (labels, etc.)
        style = ttk.Style()
        style.configure("Title.TLabel", font=("Helvetica", 16, "bold"))
        style.configure("Header.TLabel", font=("Helvetica", 12, "bold"))
        style.configure("Result.TLabel", font=("Helvetica", 14))

    def _load_workout_images(self):
        # Define the directory to look for images for each workout
        image_dir = Path(__file__).parent / "workout_images"
        image_dir.mkdir(exist_ok=True)

        # Load images for each workout, resize them, and store in dictionary
        for workout in self.CALORIES_PER_REP:
            image_path = image_dir / f"{workout.lower().replace(' ', '_')}.png"
            try:
                if not image_path.exists():  # Skip if image doesn't exist
                    continue
                # Open, resize and add image to dictionary
                image = Image.open(image_path).resize((50, 50), Image.Resampling.LANCZOS)
                self.workout_images[workout] = ImageTk.PhotoImage(image)
            except Exception as e:
                print(f"Error loading image {image_path}: {e}")

    def _create_widgets(self):
        # Create the main title label and add it to the window
        ttk.Label(self.root, text="Workout Calorie Calculator", style="Title.TLabel").pack(pady=20)

        # Main frame that contains all other widgets
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # Frame for entering workout details (sets, reps, etc.)
        self.workout_frame = ttk.LabelFrame(self.main_frame, text="Workout Details")
        self.workout_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Define headers for the columns in the workout details section
        headers = ["Workout", "Sets", "Reps", "Image"]
        for i, header in enumerate(headers):
            ttk.Label(self.workout_frame, text=header, style="Header.TLabel").grid(row=0, column=i, padx=10, pady=5)

        # Frame for action buttons (Add Workout, Calculate, Clear, Save)
        button_frame = ttk.Frame(self.main_frame)
        button_frame.pack(fill=tk.X, pady=10)

        # Button to add a new workout entry row
        ttk.Button(button_frame, text="Add Workout", command=self.add_workout).pack(side=tk.LEFT, padx=5)
        # Button to calculate the total calories burned
        self.calculate_button = ttk.Button(button_frame, text="Calculate", command=self.calculate_calories, state=tk.DISABLED)
        self.calculate_button.pack(side=tk.LEFT, padx=5)
        # Button to clear all entries
        ttk.Button(button_frame, text="Clear All", command=self.clear_all).pack(side=tk.LEFT, padx=5)
        # Button to save the current workout log to a file
        ttk.Button(button_frame, text="Save Workout", command=self.save_workout).pack(side=tk.LEFT, padx=5)

        # Frame to display the total calories burned after calculation
        self.result_frame = ttk.LabelFrame(self.main_frame, text="Results")
        self.result_frame.pack(fill=tk.X, padx=10, pady=5)

        # Label to show the total calories burned (initialized to 0)
        self.result_label = ttk.Label(self.result_frame, text="Total Calories Burned: 0 kcal", style="Result.TLabel")
        self.result_label.pack(pady=10)

    def add_workout(self):
        # Determine the row number for the new workout entry
        row = len(self.workout_entries) + 1
        # Create a variable to store the selected workout type
        workout_var = tk.StringVar(value="Select Workout")
        # Create a dropdown (combobox) for selecting the workout type
        workout_combo = ttk.Combobox(
            self.workout_frame, textvariable=workout_var, values=list(self.CALORIES_PER_REP.keys()), state="readonly"
        )
        workout_combo.grid(row=row, column=0, padx=10, pady=5)

        # Entry field for the number of sets
        sets_entry = ttk.Entry(self.workout_frame, width=10)
        sets_entry.grid(row=row, column=1, padx=10, pady=5)

        # Entry field for the number of reps
        reps_entry = ttk.Entry(self.workout_frame, width=10)
        reps_entry.grid(row=row, column=2, padx=10, pady=5)

        # Label to display the workout image
        image_label = ttk.Label(self.workout_frame)
        image_label.grid(row=row, column=3, padx=10, pady=5)

        # Add the new workout entry to the list of entries
        self.workout_entries.append((workout_var, sets_entry, reps_entry, image_label))

        # Function to update the workout image when a workout is selected
        def update_image(*args):
            workout = workout_var.get()
            if workout in self.workout_images:
                # Update the image displayed
                image_label.configure(image=self.workout_images[workout])
                image_label.image = self.workout_images[workout]

        # Bind the update_image function to the dropdown selection
        workout_var.trace('w', update_image)
        # Enable the calculate button once a workout is added
        self.calculate_button.config(state=tk.NORMAL)

    def calculate_calories(self):
        # Variable to hold the total calories burned
        total_calories = 0
        for workout_var, sets_entry, reps_entry, _ in self.workout_entries:
            try:
                # Get the workout type, sets, and reps
                workout = workout_var.get()
                sets = int(sets_entry.get())
                reps = int(reps_entry.get())
                # Calculate calories burned and add to the total
                total_calories += self.CALORIES_PER_REP.get(workout, 0) * sets * reps
            except ValueError:
                # Display error if non-numeric values are entered for sets/reps
                messagebox.showerror("Input Error", "Please enter valid numbers for sets and reps.")
                return
        # Update the result label with the calculated total calories burned
        self.result_label.config(text=f"Total Calories Burned: {total_calories:.1f} kcal")

    def save_workout(self):
        # Get the current date and time to log when the workout was done
        current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"Saving workout log at {current_datetime}")  # Debugging line to check timestamp

        with open("workout_log.txt", "a") as file:
            # Write the date and time of the workout to the log file
            file.write(f"Workout Log - {current_datetime}\n")
            # Iterate through each workout entry and write it to the log file
            for workout_var, sets_entry, reps_entry, _ in self.workout_entries:
                workout = workout_var.get()
                sets = sets_entry.get()
                reps = reps_entry.get()
                if workout != "Select Workout" and sets and reps:
                    try:
                        # Convert sets and reps to integers and calculate the calories burned
                        sets = int(sets)
                        reps = int(reps)
                        calories_burned = self.CALORIES_PER_REP.get(workout, 0) * sets * reps
                        # Write the workout details to the file
                        file.write(f"{workout}: {sets} sets x {reps} reps - {calories_burned:.1f} kcal\n")
                    except ValueError:
                        # Skip any invalid workout entries (e.g., if sets/reps aren't numbers)
                        print(f"Invalid input for {workout}: {sets} sets, {reps} reps")  # Debugging line
                        continue
            # Add a newline at the end to separate workouts
            file.write("\n")
        
        # Show a confirmation message that the workout has been saved
        messagebox.showinfo("Workout Saved", "Your workout has been saved successfully!")

    def clear_all(self):
        # Destroy all widgets in the workout entry frame except for the headers
        for widgets in self.workout_frame.winfo_children()[4:]:
            widgets.destroy()
        # Clear the list of workout entries
        self.workout_entries.clear()
        # Reset the result label to show 0 calories
        self.result_label.config(text="Total Calories Burned: 0 kcal")
        # Disable the calculate button until there is something to calculate
        self.calculate_button.config(state=tk.DISABLED)

    def run(self):
        # Start the tkinter main loop to run the app
        self.root.mainloop()

# If the script is being run directly (not imported as a module), create and run the app
if __name__ == "__main__":
    app = WorkoutCalculator()
    app.run()
