import tkinter as tk
from tkinter import ttk, messagebox

class FoodEntry(ttk.Frame):
    def __init__(self, parent, food_database, **kwargs):  # Fixed __init__
        super().__init__(parent, **kwargs)
        self.food_database = food_database
        
        # Food selection
        self.food_var = tk.StringVar()
        self.food_combobox = ttk.Combobox(self, textvariable=self.food_var, width=20)
        self.food_combobox['values'] = list(food_database.keys())
        self.food_combobox.grid(row=0, column=0, padx=5)
        
        # Weight entry
        self.weight_var = tk.StringVar()
        self.weight_entry = ttk.Entry(self, textvariable=self.weight_var, width=10)
        self.weight_entry.grid(row=0, column=1, padx=5)
        
        # Calories label
        self.calories_var = tk.StringVar(value="0 kcal")
        self.calories_label = ttk.Label(self, textvariable=self.calories_var, width=15)
        self.calories_label.grid(row=0, column=2, padx=5)
        
        # Remove button
        self.remove_button = ttk.Button(self, text="âœ•", width=3)
        self.remove_button.grid(row=0, column=3, padx=5)
        
        # Bind events
        self.food_combobox.bind('<<ComboboxSelected>>', self.update_calories)
        self.weight_var.trace('w', self.update_calories)
        
    def update_calories(self, *args):
        try:
            food = self.food_var.get()
            weight = float(self.weight_var.get() or 0)
            if food in self.food_database:
                calories = (self.food_database[food] * weight) / 100
                self.calories_var.set(f"{calories:.1f} kcal")
            else:
                self.calories_var.set("0 kcal")
        except ValueError:
            self.calories_var.set("0 kcal")
            
    def get_values(self):
        try:
            food = self.food_var.get()
            weight = float(self.weight_var.get() or 0)
            if food and weight > 0:
                calories = (self.food_database[food] * weight) / 100
                return {'food': food, 'weight': weight, 'calories': calories}
        except ValueError:
            pass
        return None
    
    def clear(self):
        self.food_var.set("")
        self.weight_var.set("")
        self.calories_var.set("0 kcal")

class CalorieCalculator:
    def __init__(self, root):  # Fixed __init__
        self.root = root
        self.root.title("Food Calorie Calculator")
        self.root.geometry("700x800")
        
        # Dictionary to store food items and their calories (per 100g)
        self.food_database = {
            "Apple": 52, "Banana": 89, "Chicken Breast": 165,
            "Rice (cooked)": 130, "Egg": 155, "Bread": 265,
            "Milk": 42, "Potato": 77, "Pasta (cooked)": 158,
            "Salmon": 208, "Yogurt": 59, "Cheese": 402,
            "Peanut Butter": 588, "Oatmeal": 307, "Orange": 47
        }
        
        # Create main container
        self.container = ttk.Frame(root, padding="10")
        self.container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Create main box
        self.main_box = ttk.LabelFrame(self.container, text="Food Calorie Calculator", padding="10")
        self.main_box.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        self.container.columnconfigure(0, weight=1)
        self.container.rowconfigure(0, weight=1)
        self.main_box.columnconfigure(0, weight=1)
        
        # Header labels
        header_frame = ttk.Frame(self.main_box)
        header_frame.grid(row=0, column=0, pady=5, sticky=(tk.W, tk.E))
        ttk.Label(header_frame, text="Food Item", width=25).grid(row=0, column=0)
        ttk.Label(header_frame, text="Weight (g)", width=15).grid(row=0, column=1)
        ttk.Label(header_frame, text="Calories", width=15).grid(row=0, column=2)
        ttk.Label(header_frame, text="", width=5).grid(row=0, column=3)  # Space for remove button
        
        # Frame for food entries
        self.entries_frame = ttk.Frame(self.main_box)
        self.entries_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # List to store food entry rows
        self.food_entries = []
        
        # Add initial single food entry row
        self.add_food_entry()
        
        # Buttons frame
        button_frame = ttk.Frame(self.main_box)
        button_frame.grid(row=2, column=0, pady=10)
        
        ttk.Button(button_frame, text="Add Another Food", 
                  command=self.add_food_entry).grid(row=0, column=0, padx=5)
        ttk.Button(button_frame, text="Calculate Total", 
                  command=self.calculate_total).grid(row=0, column=1, padx=5)
        ttk.Button(button_frame, text="Clear All", 
                  command=self.clear_all).grid(row=0, column=2, padx=5)
        
        # Total calories display
        total_frame = ttk.LabelFrame(self.main_box, text="Meal Summary", padding="10")
        total_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=10)
        
        ttk.Label(total_frame, text="Total Calories:").grid(row=0, column=0, sticky=tk.W)
        self.total_calories = 0
        self.total_calories_var = tk.StringVar(value="0 kcal")
        ttk.Label(total_frame, textvariable=self.total_calories_var).grid(
            row=0, column=1, sticky=tk.W)
        
        # Food list display
        list_frame = ttk.LabelFrame(self.main_box, text="Added Foods", padding="10")
        list_frame.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=10)
        
        self.food_list = tk.Text(list_frame, height=10, width=50)
        self.food_list.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", 
                                command=self.food_list.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.food_list.configure(yscrollcommand=scrollbar.set)
        
    def add_food_entry(self):
        entry = FoodEntry(self.entries_frame, self.food_database)
        entry.grid(row=len(self.food_entries), column=0, pady=2)
        entry.remove_button.configure(command=lambda e=entry: self.remove_food_entry(e))
        self.food_entries.append(entry)
        
    def remove_food_entry(self, entry):
        if len(self.food_entries) > 1:
            entry.grid_remove()
            self.food_entries.remove(entry)
            for i, e in enumerate(self.food_entries):
                e.grid(row=i, column=0, pady=2)
        
    def calculate_total(self):
        total_calories = 0
        self.food_list.delete(1.0, tk.END)
        
        for entry in self.food_entries:
            values = entry.get_values()
            if values:
                total_calories += values['calories']
                self.food_list.insert(tk.END, 
                    f"{values['food']}: {values['weight']}g - {values['calories']:.1f} kcal\n")
        
        self.total_calories = total_calories
        self.total_calories_var.set(f"{total_calories:.1f} kcal")
        
    def clear_all(self):
        for entry in self.food_entries:
            entry.clear()
        self.total_calories = 0
        self.total_calories_var.set("0 kcal")
        self.food_list.delete(1.0, tk.END)

if __name__ == "__main__":  # Fixed __name__
    root = tk.Tk()
    app = CalorieCalculator(root)
    root.mainloop()
